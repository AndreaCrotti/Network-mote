* First meeting
  - ask for motes available
    At least two motes to attach to the usb ports and two virtual machines are needed (or one with two modules)
  - ask for what code is already available in the testbed

* Links
  - [[http://tools.ietf.org/html/draft-daniel-6lowpan-hilow-hierarchical-routing-01][hierarchical routing over lowipv6]]
  - [[http://tools.ietf.org/html/draft-chakrabarti-6lowpan-ipv6-nd-05][neighbour discovery over low6pan]]
  - [[http://docs.tinyos.net/index.php/BLIP_Tutorial][Blip tutorial]]
  - [[http://en.wikipedia.org/wiki/IEEE_802.15.4-2006][protocol 802.15.4 from IEEE]]
  - [[http://www.tinyos.net/tinyos-2.x/doc/html/tep119.html][tep 119 on collections in tinyos]]
  - [[http://www.tinyos.net/tinyos-2.x/doc/nesdoc/telosb/index.html][tinyos documentation for telosb]]
  - [[https://lists.eecs.berkeley.edu/sympa/info/blip-users][mailing list of blip users]]
  - [[http://www.linux.com/news/hardware/peripherals/180950-udev][how to write udev rules]]
  - [[http://www.tcpdump.org/pcap.htm][Using libpcap to filter and sniff network traffic]], see ([[http://www.secdev.org/projects/scapy/demo.html][scapy for a python higher level interface]])
  - [[http://www.faqs.org/rfcs/rfc1071.html][Computing the checksum of a packet]]
    

* Useful libraries
  - [[http://www.infradead.org/~tgr/libnl/doc/modules.html][libnl, used for manipulating core network link functions]]
  - [[http://www.tcpdump.org/pcap3_man.html][pcap, capture and manage packets]]
  - [[http://www.tenouk.com/Module43a.html][example on raw sockets!!]]

* Creating TUN device to communicate
  One way is to create a rule with udev, like here:
  
#+begin_src sh
  I have this in my /etc/udev/rules.d/10-udev-rules 
  
  # N.B.: Using := prevents later rules modifying parameters, 
  # 50-dev-rules will reset device permissions to 600. 
  
  KERNEL=="tun", NAME="net/%k",MODE:="666" 
#+end_src

  Another way is to use openvpn to generate it
#+begin_src sh
  openvpn --mktun --dev tunX
#+end_src

* Hints
  - try to use TUN/TAP drivers
  - see how to send packets over the network, see 6lowpan for examples
  - check the routing protocols already present in tinyos evaluating what's best to do
  - try out the *IPBaseStation* and see how it's implemented

* Reading from the device
  *read* on the TUN device can read only one packet at a time, and is also blocking.
  It's only needed to allocate a buffer with the maximum length of the IPv6 header.

* Using TUN/TAP?
  Using a tap device we would have directly the ethernet packet, while using the tun device we're one layer upper.
  One possible advantage in using directly ethernet is that the packets can be much smaller and then we could have less problems in splitting them.
  
** Dimensions
   | Proto    | Header | Payload Max |
   |----------+--------+-------------|
   | IPv6     |        | 65k         |
   | ethernet |        |             |

* Routing
  Routing must be done bidirectionally, in tinyos is already present *CTP*, one idea is to use it twice in both directions.

  - [[http://www.deepspace6.net/docs/iproute2tunnel-en.html][setup the ipv6 routing table with iproute2]]

* Implementation
  - Using TUN to send messsages to the application instead of the 
  - change the routing table
  - enable the low-power mode for the mote in cc2420

** Instructions to create a simple network with a base station and a UDP echo mote
#+begin_src sh
  # On one mote we have to program the IPBaseStation
  # After having compiled the necessary
  cd $TOSROOT/apps/IPBaseStation
  make telosb blip install /dev/ttyUSB0 # for example
  # then we need to start the ip-driver
  sudo driver/ip-driver /dev/ttyUSB0 telosb
  
  # on the other mote we program the UDP server
  cd $TOSROOT/apps/UDPEcho
  make telosb  blip install.ID
    
  # where the ID will be the address of the client
  
  # to check that everything is working just
  ping6 fec0::<ID>
  
  # and as soon as there is communication it should work fine
#+end_src
   
   
* Tun/Tap
  We can use those interfaces in user-land mode also.

  Userland application can write IP frame to /dev/tunX and kernel will
  receive this frame from tunX interface.  In the same time every
  frame that kernel writes to tunX interface can be read by userland
  application from /dev/tunX device.

  Main purpose of TUN/TAP driver is *tunneling*.
  Here is the [[http://tuntaposx.sourceforge.net/development.xhtml][tun tap driver for OSX]] for example.

** Tun
   The TUN is Virtual Point-to-Point network device.
   TUN driver was designed as low level kernel support for
   IP tunneling. It provides to userland application
   two interfaces:
   - /dev/tunX	- character device;
   - tunX	- virtual Point-to-Point interface.

** Tap
   The TAP is a Virtual Ethernet network device.
   TAP driver was designed as low level kernel support for
   Ethernet tunneling. It provides to userland application
   two interfaces:
   - /dev/tapX	- character device;
   - tapX	- virtual Ethernet interface.
