#+AUTHOR: Andrea Crotti, Marius Grysla, Oscar Dustmann
#+OPTIONS: toc:nil num:nil
# TODO: change name of the project maybe?
MOTNET PROJECT

* Goal
  The goal of this project is to create a create a network between motes.
  Supposing we have mote A attached to a computer with an internet connection and mote b is attached to a computer without internet connection.

  Then traversing a theoretically arbitrary network of motes we can let B connect to the internet through the network.

* How to use it
  - Attach the motes on two computers /A/, /B/, where /A/ has internet access while /B/ doesn't
  - login as root (needed for tun device manipulation)
  - check that the motes are connected (motelist)
  - setup the tinyos environment
    + setup TOSROOT and other useful variables, use [[http://www.5secondfuse.com/tinyos/.bash_tinyos][.bash\_tinyos]] to do it automatically
    + follow the [[http://docs.tinyos.net/index.php/BLIP_Tutorial][blip tutorial]] to compile the serialforwarder
  - install the program on both motes with:
    + *cd motes-simple && make telosb install /dev/ttyUSB0,1*
  - compile the driver with
    + *make force*
  - on /A/ run the gateway with *./gateway /dev/ttyUSB0 wlan0* (for example)
  - on /B/ run the client with *make run*
  
  Now B should also have internet access, try to ping outside to check if it works.

* Further documentation
  In *driver* you can run *make doc* to generate the doxygen documentation of the code, which you will find in *doc_doxy*

* Files                                 
  This is the tree of files in our application
  - *driver*
    In this directory we have client and gateway program, written in C for linux systems with some bash scripts.
    + *reconstruct.c*
      this module in charge of reconstructing the chunks we get from from the network

    + *chunker.c*
      functions to split the message into many chunks

    + *client.c*
      start the client version of the program

    + *gateway.c*
      start the gateway

    + *tunnel.c*
      manage the tunnel (open close write read)

    + *setup.c*
      all the functions used both by the client and the gateway

    + *structs.c*
      contain some useful functions to manage our own data structures

    + *motecomm.c*
      low level communication between motes and driver program

    + *glue.c*
      Wrapper for the select system calls, glues several file descriptors together

    + *serialforwardif.c*
      Serial implementation using the serial forwarder for the pc side

    + *util.c*
      constructor for classes like objects

  - *motes-simple*
    + *SimpleMoteAppC.nc*
      configuration file

  - *motes*
    Infrastructure for a more generic mote program supporting blip, not compatible with actual driver.

  - *python*
    Contains experimental python code creating structs, testing packets chunking and compression

  - *talks*
    - *slides.org*
      org-mode source file of the presentation
    - *slides.tex*
      tex beamer generated file from slides.org
    - *.svg*
      images used
    - *slides.pdf*
      resulting slides



