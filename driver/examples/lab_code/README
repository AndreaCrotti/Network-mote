    ___    __      __         
   /   |  / /___  / /_  ____ _
  / /| | / / __ \/ __ \/ __ `/
 / ___ |/ / /_/ / / / / /_/ / 
/_/  |_/_/ .___/_/ /_/\__,_/  
        /_/                   

ALPHA - Adaptive and Lightweight Protocol for Hop-by-Hop Authentication
-----------------------------------------------------------------------

This is a first implementation of ALPHA. The protocol was developed by
Tobias Heer, Stefan Goetz, Oscar Garcia Morchon and Klaus Wehrle of
Distributed Systems Group at RWTH-Aachen University.

THIS SOFTWARE IS NOT FINISHED! There are plenty of TODOs (documented in the source
code) and quite a few (more or less uncritical) BUGS. However, the basic alpha
mode (using the basic signature scheme, as described on page 4) is working.

alpha uses tun/tap network interfaces and character device drivers for creating
a vpn-like tunnel. Important files for using alpha include:

* alpha.conf
   contains the global configuration for the alpha-daemon as well as a
   of known hosts, for which alpha traffic is processed. After modifying this 
   file alpha can be forced to read it in by sending a HUP signal or using 
   alphacontrol

* defines.h
   contains some configuration options, for example the port number of all
   alpha traffic, the tun network interface names (default alpha0), the tun
   character devices (default /dev/net/tun on linux and /dev/tun0 on OSX),
   the debug verbosity, the MTU, hash chain length and some other stuff.
   This is the only file you need to change if you want to reconfigure alpha
   parameters.

* filter/evil
   Evil filter for alpha. This is supposed to simulate some "real world"
   noisy and/or hostile environment, by randomly dropping or changing some
   of the alpha packets. This is implemented using netfilter ipqueue.

* filter/alphafilter
   The filter part of alpha. This is supposed to run on intermediate routers.
   Streams of alpha packets are observed and those packets who fail the integrity
   check are discarded. This is implemented using netfilter ipqueue.

Steps to use alpha:

* Two hosts, which can directly reach each other (maybe using port forwarding, but
  NO network address translation (NAT)).
* Both hosts start "./alpha"
* The host connecting (i.e. sending the SYN) should have a public-key of the 
  server stored under <hostname>.pem or configure via the keyfile option
* You should now be able to send arbitrary network traffic (for example ping) to
  the public ip address, i.e. the one which you just added, of the other host.
  Traffic should get routed through alpha.

Makefile:

* all: Compile the alpha daemon
* final: final build without debugging / output
* filter: make the filter (in subdir filter/)
* install: use "make prefix=$HOME/local/" to select a different install location
* doc: Create doxygen documentation
* keypair: Create a private and public-key to use as a server

Dependencies:

In order to build and run Alpha you'll need the following libraries/programs:
* OpenSSL (required), needed for DSA and SHA1/MD5 operations
* Doxygen (optional), in case you want to build the HTML documentation

Since Alpha uses some pretty advanced techniques to provide transparent routing 
your operating system needs to fulfill certain prerequisites.

* Linux:
   In order for this to work, you will have to enable the
   following kernel options:
    IP: advanced router (CONFIG_IP_ADVANCED_ROUTER)
    IP: policy routing (CONFIG_IP_MULTIPLE_TABLES)
    IP: use netfilter MARK value as routing key
     (CONFIG_IP_ROUTE_FWMARK) (kernel < 2.6.20)
     http://linux.derkeiler.com/Newsgroups/comp.os.linux.networking/2008-02/msg00122.html

